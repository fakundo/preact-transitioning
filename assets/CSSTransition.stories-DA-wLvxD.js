import{u as t}from"./jsxRuntime.module-CFb5ymYX.js";import"./preact.module-CLNnjL5T.js";import"./hooks.module-Bqmbac_-.js";import{C as n}from"./CSSTransition-D2FYEyZ0.js";const r='The `CSSTransition` component applies CSS transitions based on the phase of a transition lifecycle.\nIt automatically manages the class names for each transition phase (e.g., "appear", "enter", "exit")\nand applies them to the `children` element.',o={onEnter:{control:!1,name:"onEnter",description:"",type:{name:"(node?: Element | Text) => void",required:!1},table:{defaultValue:null}},onEntering:{control:!1,name:"onEntering",description:"",type:{name:"(node?: Element | Text) => void",required:!1},table:{defaultValue:null}},onEntered:{control:!1,name:"onEntered",description:"",type:{name:"(node?: Element | Text) => void",required:!1},table:{defaultValue:null}},onExit:{control:!1,name:"onExit",description:"",type:{name:"(node?: Element | Text) => void",required:!1},table:{defaultValue:null}},onExiting:{control:!1,name:"onExiting",description:"",type:{name:"(node?: Element | Text) => void",required:!1},table:{defaultValue:null}},onExited:{control:!1,name:"onExited",description:"",type:{name:"(node?: Element | Text) => void",required:!1},table:{defaultValue:null}},in:{control:null,name:"in",description:`If true, the element is shown and transitions through the "appear", "enter", or "exit" phases to the "entered" state.
If false, it transitions through the "exit" phases to the "exited" state.`,type:{name:"boolean",required:!1},table:{defaultValue:{summary:"false"}}},appear:{control:null,name:"appear",description:'If true, the transition will run the "appear" phases ("appear", "appearActive", "appearDone") when the component is first mounted.',type:{name:"boolean",required:!1},table:{defaultValue:{summary:"false"}}},enter:{control:null,name:"enter",description:'If true, enables the "enter" phases ("enter", "enterActive", "enterDone") when the component enters.',type:{name:"boolean",required:!1},table:{defaultValue:{summary:"true"}}},exit:{control:null,name:"exit",description:'If true, enables the "exit" phases ("exit", "exitActive", "exitDone") when the component leaves.',type:{name:"boolean",required:!1},table:{defaultValue:{summary:"true"}}},duration:{control:null,name:"duration",description:"Duration of the transition in milliseconds. Can be used to override default durations for the phases.",type:{name:"number",required:!1},table:{defaultValue:{summary:"DEFAULT_TRANSITION_DURATION=500"}}},alwaysMounted:{control:null,name:"alwaysMounted",description:'If true, the component remains mounted in the DOM even when it transitions to the "exited" state.',type:{name:"boolean",required:!1},table:{defaultValue:{summary:"false"}}},addEndListener:{control:!1,name:"addEndListener",description:"A function called to manually handle the end of a transition phase.",type:{name:"(node: Element | Text, done: () => void) => void",required:!1},table:{defaultValue:null}},children:{control:!1,name:"children",description:"The child element to which the animation will be applied.\nThis should be a single element that supports the `class` prop.\nThe `class` prop will be combined with the class name from the `classNames` prop, based on the current transition phase.",type:{name:"VNode<{ class?: any; className?: any; }>",required:!0},table:{defaultValue:null}},classNames:{control:null,name:"classNames",description:"Defines the CSS class names to be applied for each transition phase.",type:{name:"CSSTransitionClassNames",required:!0},table:{defaultValue:null}}},u={title:"Components/CSSTransition",component:n,tags:["autodocs"],parameters:{docs:{description:{component:r}}},argTypes:o,args:{in:!0,appear:!0,classNames:"fade",alwaysMounted:!0}},e={render:a=>t(n,{...a,children:t("div",{style:{width:100,height:100,borderRadius:"15%",background:"linear-gradient(to bottom right, seagreen, teal)"}})})};e.parameters={...e.parameters,docs:{...e.parameters?.docs,source:{originalSource:`{
  render: args => <CSSTransition {...args}>
      <div style={{
      width: 100,
      height: 100,
      borderRadius: '15%',
      background: 'linear-gradient(to bottom right, seagreen, teal)'
    }} />
    </CSSTransition>
}`,...e.parameters?.docs?.source}}};const p=["Playground"];export{e as Playground,p as __namedExportsOrder,u as default};
